// Generated by CoffeeScript 2.7.0
var KEYWORDS,
  indexOf = [].indexOf;

import {
  g,
  range,
  print,
  scalex,
  scaley,
  assert,
  SEPARATOR
} from './globals.js';

import {
  parseExpr
} from './parser.js';

import {
  Player
} from './player.js';

import {
  Edmonds
} from './blossom.js';

import {
  Tables
} from './page_tables.js';

import {
  Names
} from './page_names.js';

import {
  Standings
} from './page_standings.js';

import {
  Active
} from './page_active.js';

KEYWORDS = {};

KEYWORDS.TITLE = 'text';

KEYWORDS.DATE = 'text';

KEYWORDS.ROUND = 'integer';

KEYWORDS.PAUSED = '!-separated integers';

KEYWORDS.TPP = 'integer (Tables Per Page, default: 30)';

KEYWORDS.PPP = 'integer (Players Per Page, default: 60)';

// KEYWORDS.K = 'integer (default: 20)'
KEYWORDS.FACTOR = 'float, 0 or larger than 1.2 (default: 2)';

export var Tournament = class Tournament {
  constructor() {
    this.title = '';
    this.round = 0;
    this.tpp = 30;
    this.ppp = 60;
    // dessa tre listor pekar på samma objekt
    this.players = [];
    this.playersByID = []; // sorterad på id
    this.playersByELO = []; // sorterad på elo och name
    this.pairs = []; // varierar med varje rond
    this.robin = range(g.N);
    this.mat = [];
    this.virgin = true;
    this.meetings = [];
  }

  write() {}

  makeEdges(iBye) { // iBye är ett id eller -1
    var a, arr, b, cost, diff, k, l, len, len1, pa, pb, ref, ref1;
    arr = [];
    ref = this.playersByELO;
    for (k = 0, len = ref.length; k < len; k++) {
      pa = ref[k];
      a = pa.id;
      if (!pa.active || a === iBye) {
        continue;
      }
      ref1 = this.playersByELO;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        pb = ref1[l];
        b = pb.id;
        if (a === b) {
          continue;
        }
        if (!pb.active || b === iBye) {
          continue;
        }
        diff = abs(pa.elo - pb.elo);
        cost = 9999 - diff ** g.EXPONENT;
        if (a < b) {
          continue;
        }
        if (g.ok(pa, pb)) {
          arr.push([a, b, cost]);
        }
      }
    }
    arr.sort(function(a, b) {
      return b[2] - a[2];
    });
    return arr;
  }

  findSolution(edges) {
    var edmonds;
    edmonds = new Edmonds(edges);
    return edmonds.maxWeightMatching(edges);
  }

  assignColors(p0, p1) {
    var b0, b1, x;
    b0 = p0.balans();
    b1 = p1.balans();
    if (b0 < b1) {
      x = 0;
    } else if (b0 > b1) {
      x = 1;
    } else if (p0.id < p1.id) {
      x = 0;
    } else {
      x = 1;
    }
    p0.col += 'wb'[x];
    return p1.col += 'bw'[x];
  }

  unscramble(solution) { // [5,3,4,1,2,0] => [[0,5],[1,3],[2,4]]
    var i, j, k, len, ref, result;
    solution = _.clone(solution);
    result = [];
    ref = range(solution.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (solution[i] !== -1) {
        j = solution[i];
        result.push([i, j]);
        solution[j] = -1;
        solution[i] = -1;
      }
    }
    return result;
  }

  solutionCost(pair) {
    var a, b, da, db, diff, pa, pb;
    [a, b] = pair;
    pa = this.playersByID[a];
    pb = this.playersByID[b];
    da = pa.elo;
    db = pb.elo;
    diff = Math.abs(da - db);
    return diff ** g.EXPONENT;
  }

  solutionCosts(pairs) {
    var pair;
    return g.sumNumbers((function() {
      var k, len, results;
      results = [];
      for (k = 0, len = pairs.length; k < len; k++) {
        pair = pairs[k];
        results.push(this.solutionCost(pair));
      }
      return results;
    }).call(this));
  }

  preMatch() { // return id för spelaren som ska ha bye eller -1 om bye saknas
    var k, len, p, pBye, ref, temp;
    ref = this.playersByID;
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      if (!p.active) {
        p.res += '0';
      }
    }
    temp = _.filter(this.playersByELO, function(p) {
      return p.active;
    });
    if (temp.length % 2 === 1) { // Spelaren med lägst elo och som inte har haft frirond, får frironden
      temp = _.filter(this.playersByELO, function(p) {
        return p.active && p.bye() === false;
      });
      pBye = _.last(temp);
      pBye.opp.push(g.BYE);
      pBye.col += '_';
      pBye.res += '2';
      return pBye.id;
    }
    return g.BYE;
  }

  postMatch() {
    var a, b, col0, col1, i, k, l, len, len1, len2, len3, len4, m, o, p, pa, pb, q, ref, ref1, ref2, ref3, ref4, results;
    ref = this.playersByID;
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      if (p.active) {
        continue;
      }
      p.opp.push(g.PAUSE);
      p.col += '_';
    }
    ref1 = this.pairs;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      [a, b] = ref1[l];
      pa = this.playersByID[a];
      pb = this.playersByID[b];
      pa.opp.push(pb.id);
      pb.opp.push(pa.id);
    }
    if (this.round === 0) {
      ref2 = range(this.pairs.length);
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        i = ref2[m];
        [a, b] = this.pairs[i];
        pa = this.playersByID[a];
        pb = this.playersByID[b];
        col1 = "bw"[i % 2];
        col0 = g.other(col1);
        pa.col += col0;
        pb.col += col1;
        if (i % 2 === 1) {
          this.pairs[i].reverse();
        }
      }
    } else {
      ref3 = range(this.pairs.length);
      for (o = 0, len3 = ref3.length; o < len3; o++) {
        i = ref3[o];
        [a, b] = this.pairs[i];
        pa = this.playersByID[a];
        pb = this.playersByID[b];
        this.assignColors(pa, pb);
        if (pa.col[this.round] === 'b') {
          this.pairs[i].reverse();
        }
      }
    }
    ref4 = this.pairs;
    results = [];
    for (i = q = 0, len4 = ref4.length; q < len4; i = ++q) {
      [a, b] = ref4[i];
      pa = this.playersByID[a];
      pb = this.playersByID[b];
      pa.chair = 2 * i;
      results.push(pb.chair = 2 * i + 1);
    }
    return results;
  }

  downloadFile(txt, filename) {
    var a, blob, url;
    blob = new Blob([txt], {
      type: 'text/plain'
    });
    url = URL.createObjectURL(blob);
    a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    return URL.revokeObjectURL(url);
  }

  lotta() {
    var a, arr, b, edges, end, k, l, len, len1, n, ref, ref1, solution, start;
    if (this.round > 0 && g.calcMissing() > 0) {
      print('lottning ej genomförd!');
      return;
    }
    this.virgin = false;
    this.downloadFile(this.makeTournament(), `${this.filename}-R${this.round}.txt`);
    print("");
    print(`Lottning av rond ${this.round} =====================================================`);
    document.title = `Round ${this.round + 1}`;
    arr = this.makeEdges(this.preMatch()); // -1 om bye saknas
    start = new Date();
    n = 1000000; // 1000 celler
    ref = range(n, arr.length + n, n);
    for (k = 0, len = ref.length; k < len; k++) {
      end = ref[k];
      edges = arr.slice(0, end);
      start = new Date();
      print('edges', edges);
      solution = this.findSolution(edges);
      print('cpu', end, new Date() - start);
      print('solution', indexOf.call(solution, -1) < 0, solution);
    }
    // if solution.length == g.N and -1 not in solution then break # tag hänsyn till BYE och PAUSED senare
    // if not (solution.length == g.N and -1 not in solution)
    // 	alert 'Pairing impossible. Too many rounds or paused players'
    // 	return
    this.pairs = this.unscramble(solution);
    if (this.pairs.length < Math.floor((this.playersByID.length - this.paused.length) / 2)) {
      print('Pairing impossible');
      return;
    }
    print('pre pairs', this.pairs);
    this.pairs.sort((a, b) => {
      var aelo, belo;
      aelo = this.playersByID[a[0]].elo + this.playersByID[a[1]].elo;
      belo = this.playersByID[b[0]].elo + this.playersByID[b[1]].elo;
      return belo - aelo;
    });
    ref1 = this.pairs;
    for (b = l = 0, len1 = ref1.length; l < len1; b = ++l) {
      a = ref1[b];
      this.meetings.push(`${this.playersByID[a[0]].elo} ${this.playersByID[a[1]].elo}`);
      this.meetings.push(`${this.playersByID[a[1]].elo} ${this.playersByID[a[0]].elo}`);
    }
    if (this.round === 0) {
      print('pairs', this.pairs);
    }
    if (this.round > 0) {
      print('pairs', (function() {
        var len2, m, ref2, results;
        ref2 = this.pairs;
        results = [];
        for (m = 0, len2 = ref2.length; m < len2; m++) {
          [a, b] = ref2[m];
          results.push([a, b, this.playersByID[a].elo, this.playersByID[b].elo, Math.abs(this.playersByID[a].elo - this.playersByID[b].elo).toFixed(1)]);
        }
        return results;
      }).call(this));
    }
    print('solutionCosts', this.solutionCosts(this.pairs));
    this.postMatch();
    g.pages[g.NAMES].setLista();
    g.pages[g.TABLES].setLista();
    g.pages[g.STANDINGS].setLista();
    this.downloadFile(this.meetings.join("\n"), `meetings-R${this.round}.txt`);
    this.downloadFile(this.makeStandardFile(), `${this.filename}-R${this.round}.prn`);
    this.round += 1;
    print(this.makeMatrix(80)); // skriver till debug-fönstret, time outar inte.
    return g.state = g.TABLES;
  }

  dump(title) {
    print(`##### ${title} #####`);
    print('TITLE', this.title);
    print('DATE', this.datum);
    print('ROUND', this.round);
    print('TPP', this.tpp);
    print('PPP', this.ppp);
    print('PAUSED', this.paused);
    print('FACTOR', g.FACTOR);
    // print 'PLAYERS'
    // for p in @persons
    // 	print '  ', p.id, p.elo, p.name, p.opp, p.col, p.res
    return print('################');
  }

  fetchData(filename, data) {
    var XMAX, XMIN, a, arr, b, hash, helpText, i, id, item, k, key, keyword, l, len, len1, len2, len3, len4, len5, line, m, nr, o, p, pa, pb, player, players, q, ref, ref1, ref2, ref3, ref4, ref5, s, value;
    randomSeed(99);
    this.filename = filename.replaceAll(".txt", "");
    data = data.split('\n');
    hash = {};
    // default values
    hash.PLAYERS = [];
    hash.TITLE = '';
    hash.DATE = '';
    hash.ROUND = 0;
    hash.TPP = 30;
    hash.PPP = 60;
    hash.PAUSED = "";
    //hash.K = 2
    hash.FACTOR = 2; // default
    for (nr = k = 0, len = data.length; k < len; nr = ++k) {
      line = data[nr];
      line = line.trim();
      if (line.length === 0) {
        continue;
      }
      arr = line.split('=');
      if (arr.length === 2) {
        if (!(arr[0] in KEYWORDS)) {
          helpText = ((function() {
            var results;
            results = [];
            for (key in KEYWORDS) {
              value = KEYWORDS[key];
              results.push(`    ${key}: ${value}`);
            }
            return results;
          })()).join('\n');
          keyword = `\"${arr[0]}\"`;
          alert(`${keyword} in line ${nr + 1} is not one of\n${helpText}`);
          return;
        }
        hash[arr[0]] = arr[1];
      } else {
        if (indexOf.call(line, '!') < 0) {
          alert(`${line}\n in line ${nr + 1}\n must look like\n    2882!CARLSEN Magnus or\n    1601!NILSSON Christer!2w0`);
          return;
        }
        arr = line.split('!');
        if (!/^\d{4}$/.test(arr[0])) {
          alert(`${arr[0]}\n in line ${nr + 1}\n must have four digits`);
          return;
        }
        ref = range(2, arr.length);
        for (l = 0, len1 = ref.length; l < len1; l++) {
          i = ref[l];
          item = arr[i];
          if (!/^-?\d+(w|_|b)[0-2]$/.test(item)) {
            alert(`${item}\n in line ${nr + 1}\n must follow the format <number> <color> <result>\n  where color is one of w,b or _\n  and result is one of 0, 1 or 2`);
            return;
          }
        }
        hash.PLAYERS.push(arr);
      }
    }
    this.players = [];
    this.title = hash.TITLE;
    this.datum = hash.DATE;
    this.round = parseInt(hash.ROUND);
    this.tpp = parseInt(hash.TPP); // Tables Per Page
    this.ppp = parseInt(hash.PPP); // Players Per Page
    this.paused = hash.PAUSED; // list of zero based ids
    // g.K  = parseInt hash.K # 40, 20 or 10 normally
    g.FACTOR = parseFloat(hash.FACTOR);
    players = hash.PLAYERS;
    g.N = players.length;
    if (!((4 <= (ref1 = g.N) && ref1 < 1000))) {
      alert("Number of players must be between 4 and 999!");
      return;
    }
    this.playersByID = [];
    ref2 = range(g.N);
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      player = new Player(i);
      player.read(players[i]);
      this.playersByID.push(player);
    }
    if (this.paused === "") {
      this.paused = [];
    } else {
      this.paused = this.paused.split('!');
      ref3 = this.paused;
      for (o = 0, len3 = ref3.length; o < len3; o++) {
        id = ref3[o];
        if (id !== "") {
          this.playersByID[id].active = false;
        }
      }
    }
    ref4 = range(g.N);
    for (q = 0, len4 = ref4.length; q < len4; q++) {
      i = ref4[q];
      this.playersByID[i].id = i;
      this.playersByID[i].elo = parseInt(this.playersByID[i].elo);
    }
    this.playersByELO = _.clone(this.playersByID);
    this.playersByELO.sort(function(a, b) {
      if (a.elo !== b.elo) {
        return b.elo - a.elo;
      }
      if (a.name > b.name) {
        return 1;
      } else {
        return -1;
      }
    });
    if (g.FACTOR === 0) {
      g.OFFSET = 0;
      print('g.OFFSET', g.OFFSET);
    } else {
      if (g.FACTOR < 1.2) {
        g.FACTOR = 1.2;
      }
      XMAX = this.playersByELO[0].elo;
      XMIN = _.last(this.playersByELO).elo;
      g.OFFSET = (XMAX - XMIN) / (g.FACTOR - 1) - XMIN;
      g.OFFSET = Math.round(g.OFFSET);
      print('XMIN,XMAX,g.OFFSET', XMIN, XMAX, g.OFFSET);
    }
    print('playersByELO', this.playersByELO);
    print('playersByID', this.playersByID);
    this.playersByName = _.sortBy(this.playersByID, function(player) {
      return player.name;
    });
    print('playersByName', this.playersByName);
    // extract @pairs from the last round
    this.pairs = [];
    ref5 = this.playersByID;
    for (s = 0, len5 = ref5.length; s < len5; s++) {
      p = ref5[s];
      a = p.id;
      b = _.last(p.opp);
      if (a < b) {
        pa = this.playersByID[a];
        pb = this.playersByID[b];
        this.pairs.push('w' === _.last(p.col) ? (pa.chair = 2 * this.pairs.length, pb.chair = 2 * this.pairs.length + 1, [a, b]) : (pa.chair = 2 * this.pairs.length + 1, pb.chair = 2 * this.pairs.length, [b, a]));
      }
    }
    print('@pairs', this.pairs);
    this.dump('fetch');
    this.virgin = true;
    g.pages = [new Tables(), new Names(), new Standings(), new Active()];
    g.pages[g.ACTIVE].setLista();
    g.pages[g.NAMES].setLista();
    g.pages[g.TABLES].setLista();
    g.pages[g.STANDINGS].setLista();
    return g.state = g.ACTIVE;
  }

  makePaused() {
    return this.paused.join(SEPARATOR); // (12!34)
  }

  makePlayers() {
    var p, players;
    players = (function() {
      var k, len, ref, results;
      ref = this.playersByID;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        p = ref[k];
        results.push(p.write());
      }
      return results;
    }).call(this);
    return players.join("\n");
  }

  makeTournament() {
    var res;
    res = [];
    res.push("ROUND=" + this.round);
    res.push("TITLE=" + this.title);
    res.push("DATE=" + this.datum);
    //res.push "K=" + g.K
    res.push("FACTOR=" + g.FACTOR);
    res.push("TPP=" + this.tpp);
    res.push("PPP=" + this.ppp);
    res.push("PAUSED=" + this.makePaused());
    res.push("");
    res.push(this.makePlayers());
    return res.join('\n');
  }

  makeStandardFile() {
    var header_after, header_in, res;
    res = [];
    header_after = " for " + this.title + ` after Round ${this.round}`;
    header_in = " for " + this.title + ` in Round ${this.round + 1}`;
    if (this.round < 999) {
      g.pages[g.STANDINGS].make(res, header_after);
    }
    if (this.round >= 0) {
      g.pages[g.NAMES].make(res, header_in, this.playersByName);
    }
    if (this.round < 999) {
      g.pages[g.TABLES].make(res, header_in);
    }
    return res.join("\n");
  }

  distans(rounds) {
    var a, b, i, k, l, len, len1, pa, pb, ref, ref1, result;
    print(rounds);
    if (rounds.length === 0) {
      return "0";
    }
    result = [];
    ref = range(rounds.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = rounds[i];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        [a, b] = ref1[l];
        if (b === void 0) {
          continue;
        }
        if (a < 0 || b < 0) {
          continue;
        }
        pa = this.playersByID[a];
        pb = this.playersByID[b];
        // if pa.active and pb.active 
        result.push(abs(pa.elo - pb.elo));
      }
    }
    return (g.sum(result) / result.length).toFixed(2);
  }

  makeCanvas(n) {
    var i, k, len, line, ref, result;
    result = [];
    ref = range(n);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      line = new Array(n);
      _.fill(line, '·');
      line[i] = '*';
      result.push(line);
    }
    return result;
  }

  dumpCanvas(title, average, canvas, n) {
    var header, i, item, k, len, nr, ordning, output, p, ref, row;
    output = [];
    if (title !== "") {
      output.push(title);
    }
    output.push(`Sparseness: ${average}  (Average Elo Difference)  FACTOR:${g.FACTOR}`);
    header = ((function() {
      var k, len, ref, results;
      ref = range(n);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push(str((i + 1) % 10));
      }
      return results;
    })()).join(' ');
    output.push('     ' + header + '   Elo    AED');
    ordning = (function() {
      var k, len, ref, results;
      ref = this.playersByELO;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        p = ref[k];
        results.push(p.elo);
      }
      return results;
    }).call(this);
    ref = range(canvas.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      row = canvas[i];
      nr = str(i + 1).padStart(3);
      output.push(`${nr}  ${((function() {
        var l, len1, results;
        results = [];
        for (l = 0, len1 = row.length; l < len1; l++) {
          item = row[l];
          results.push(str(item));
        }
        return results;
      })()).join(" ")}  ${ordning[i]} ${this.playersByELO[i].avgEloDiffAbs().toFixed(1).padStart(6)} ${this.playersByELO[i].avgEloDiffRel().toFixed(1).padStart(6)}`);
    }
    output.push('     ' + header);
    return output.join('\n');
  }

  drawMatrix(title, rounds, n) {
    var a, b, canvas, i, inside, k, l, len, len1, ref, ref1;
    canvas = this.makeCanvas(n);
    ref = range(rounds.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = rounds[i];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        [a, b] = ref1[l];
        if (a === void 0) {
          continue;
        }
        if (b === void 0) {
          continue;
        }
        inside = (0 <= a && a < n) && (0 <= b && b < n);
        if (!inside) {
          continue;
        }
        // pa = @playersByELO[a]
        // pb = @playersByELO[b]
        canvas[a][b] = g.ALFABET[i];
        canvas[b][a] = g.ALFABET[i];
      }
    }
    return this.dumpCanvas(title, this.distans(rounds), canvas, n);
  }

  makeMatrix(n) {
    var inv, matrix, p, r;
    if (n > g.N) {
      n = g.N;
    }
    inv = g.invert((function() {
      var k, len, ref, results;
      ref = this.playersByELO;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        p = ref[k];
        results.push(p.id);
      }
      return results;
    }).call(this));
    matrix = (function() {
      var k, len, ref, results;
      ref = range(this.round);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        r = ref[k];
        results.push((function() {
          var l, len1, ref1, results1;
          ref1 = this.playersByELO;
          results1 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            p = ref1[l];
            results1.push([inv[p.id], inv[p.opp[r]]]);
          }
          return results1;
        }).call(this));
      }
      return results;
    }).call(this);
    print('matrix', matrix);
    return this.drawMatrix(this.title, matrix, n);
  }

  makeBubbles() {
    var k, l, len, len1, pa, pb, r, ref, ref1, res;
    res = [];
    ref = this.playersByID;
    for (k = 0, len = ref.length; k < len; k++) {
      pa = ref[k];
      ref1 = range(this.round);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        r = ref1[l];
        if (pa.opp[r] >= 0) {
          pb = this.playersByID[pa.opp[r]];
          res.push(`${pa.elo}\t${pb.elo}`);
        }
      }
    }
    return res.join('\n');
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\FairPair\coffee\tournament.coffee