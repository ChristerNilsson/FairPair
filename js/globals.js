// Generated by CoffeeScript 2.7.0
  // import { Tournament } from './tournament.js' 
var xxx,
  indexOf = [].indexOf;

import {
  Tables
} from './page_tables.js';

import {
  Names
} from './page_names.js';

import {
  Standings
} from './page_standings.js';

import {
  Active
} from './page_active.js';

export var g = {};

//##########################################
g.EXPONENT = 1.01; // 1 or 1.01 (or 2)

g.COLORS = 1; // 2 ej tillåtet, då kan www eller bbb uppstå.

g.BONUS = 1; // % fördel för svart vid remi. Dubbelt vid vinst. Motsvarande negativt för vit.


//##########################################
export var print = console.log;

export var range = _.range;

export var scalex = function(x) {
  return x * g.ZOOM[g.state] / 20;
};

export var scaley = function(y) {
  return y * g.ZOOM[g.state];
};

g.seed = 0;

export var random = function() {
  return (((Math.sin(g.seed++) / 2 + 0.5) * 10000) % 100) / 100;
};

export var wrap = function(s) {
  return `(${s})`;
};

g.BYE = -1;

g.PAUSE = -2;

export var SEPARATOR = '!';

g.TABLES = 0;

g.NAMES = 1;

g.STANDINGS = 2;

g.ACTIVE = 3;

g.pages = [];

g.message = "";

g.F = function(diff) {
  return 1 / (1 + pow(10, -diff / 400));
};

g.showType = function(a) {
  if (typeof a === 'string') {
    return `'${a}'`;
  } else {
    return a;
  }
};

export var assert = function(a, b) {
  if (!_.isEqual(a, b)) {
    return print(`Assert failure: ${JSON.stringify(a)} != ${JSON.stringify(b)}`);
  }
};

g.ok = function(a, b) {
  var ref;
  return a.id !== b.id && (ref = a.id, indexOf.call(b.opp, ref) < 0) && abs(a.balans() + b.balans()) <= g.COLORS;
};

// g.ok = (a,b) -> 
// 	mand = a.mandatory() + b.mandatory()
// 	a.id != b.id and a.id not in b.opp and mand != "bb" and mand != "ww"
g.other = function(col) {
  if (col === 'b') {
    return 'w';
  } else {
    return 'b';
  }
};

g.myRound = function(x, decs) {
  return x.toFixed(decs);
};

assert("2.0", g.myRound(1.99, 1));

assert("0.6", g.myRound(0.61, 1));

g.ints2strings = function(ints) {
  return `${ints}`;
};

assert("1,2,3", g.ints2strings([1, 2, 3]));

assert("1", g.ints2strings([1]));

assert("", g.ints2strings([]));

g.res2string = function(ints) {
  var i;
  return ((function() {
    var j, len, results;
    results = [];
    for (j = 0, len = ints.length; j < len; j++) {
      i = ints[j];
      results.push(i.toString());
    }
    return results;
  })()).join('');
};

assert("123", g.res2string([1, 2, 3]));

assert("1", g.res2string([1]));

assert("", g.res2string([]));

g.zoomIn = function(n) {
  return g.ZOOM[g.state]++;
};

g.zoomOut = function(n) {
  return g.ZOOM[g.state]--;
};

g.setState = function(newState) {
  if (g.tournament.round > 0) {
    return g.state = newState;
  }
};

g.invert = function(arr) {
  var i, j, len, ref, res;
  res = [];
  ref = range(arr.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    res[arr[i]] = i;
  }
  return res;
};

assert([0, 1, 2, 3], g.invert([0, 1, 2, 3]));

assert([3, 2, 0, 1], g.invert([2, 3, 1, 0]));

assert([2, 3, 1, 0], g.invert(g.invert([2, 3, 1, 0])));

xxx = [[2, 1], [12, 2], [12, 1], [3, 4]];

xxx.sort(function(a, b) {
  var diff;
  diff = a[0] - b[0];
  if (diff === 0) {
    return a[1] - b[1];
  } else {
    return diff;
  }
});

assert([[2, 1], [3, 4], [12, 1], [12, 2]], xxx);

assert(true, [2] > [12]);

assert(true, "2" > "12");

assert(false, 2 > 12);

// xxx = [[2,1],[12,2],[12,1],[3,4]]
// assert [[2,1],[12,1],[12,2],[3,4]], _.sortBy(xxx, (x) -> [x[0],x[1]])
// assert [[3,4],[2,1],[12,1],[12,2]], _.sortBy(xxx, (x) -> -x[0])
// assert [[2,1],[12,1],[3,4],[12,2]], _.sortBy(xxx, (x) -> x[1])
// assert [[3,4],[12,1],[2,1],[12,2]], _.sortBy(xxx, (x) -> -x[1])
g.calcMissing = function() {
  var j, len, missing, p, ref;
  missing = 0;
  ref = g.tournament.playersByID;
  for (j = 0, len = ref.length; j < len; j++) {
    p = ref[j];
    if (!p.active) {
      continue;
    }
    if (g.BYE === _.last(p.opp)) {
      continue;
    }
    if (p.res.length < p.col.length) {
      missing++;
    }
  }
  // g.message = "#{missing//2} results missing"
  return Math.floor(missing / 2);
};

g.sum = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += parseFloat(item);
  }
  return res;
};

assert(6, g.sum('012012'));

g.sumNumbers = function(arr) {
  var item, j, len, res;
  // print 'sumNumbers',arr
  res = 0;
  for (j = 0, len = arr.length; j < len; j++) {
    item = arr[j];
    res += item;
  }
  return res;
};

assert(15, g.sumNumbers([1, 2, 3, 4, 5]));

g.txtT = function(value, w, align = CENTER) {
  var diff, lt, res, rt;
  if (value.length > w) {
    value = value.substring(0, w);
  }
  if (value.length < w && align === RIGHT) {
    value = value.padStart(w);
  }
  if (align === LEFT) {
    res = value + _.repeat(' ', w - value.length);
  }
  if (align === RIGHT) {
    res = _.repeat(' ', w - value.length) + value;
  }
  if (align === CENTER) {
    diff = w - value.length;
    lt = _.repeat(' ', Math.floor((1 + diff) / 2));
    rt = _.repeat(' ', Math.floor(diff / 2));
    res = lt + value + rt;
  }
  return res;
};

g.prBth = function(score) {
  return `${'0½1'[score]}-${'1½0'[score]}`;
};

g.prBoth = function(score) {
  return ` ${'0½1'[score]} - ${'1½0'[score]} `;
};

//##########################

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFscy5qcyIsInNvdXJjZVJvb3QiOiIuLlxcIiwic291cmNlcyI6WyJjb2ZmZWVcXGdsb2JhbHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBK0M7QUFBQSxJQUFBLEdBQUE7RUFBQTs7QUFDL0MsT0FBQTtFQUFTLE1BQVQ7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxLQUFUO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsU0FBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLE1BQVQ7Q0FBQSxNQUFBOztBQUVBLE9BQUEsSUFBTyxDQUFBLEdBQUksQ0FBQSxFQU5vQzs7O0FBVS9DLENBQUMsQ0FBQyxRQUFGLEdBQWEsS0FWa0M7O0FBVy9DLENBQUMsQ0FBQyxNQUFGLEdBQVcsRUFYb0M7O0FBWS9DLENBQUMsQ0FBQyxLQUFGLEdBQVUsRUFacUM7Ozs7QUFnQi9DLE9BQUEsSUFBTyxLQUFBLEdBQVEsT0FBTyxDQUFDOztBQUN2QixPQUFBLElBQU8sS0FBQSxHQUFRLENBQUMsQ0FBQzs7QUFDakIsT0FBQSxJQUFPLE1BQUEsR0FBUyxRQUFBLENBQUMsQ0FBRCxDQUFBO1NBQU8sQ0FBQSxHQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUgsQ0FBVixHQUFzQjtBQUE3Qjs7QUFDaEIsT0FBQSxJQUFPLE1BQUEsR0FBUyxRQUFBLENBQUMsQ0FBRCxDQUFBO1NBQU8sQ0FBQSxHQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUg7QUFBakI7O0FBRWhCLENBQUMsQ0FBQyxJQUFGLEdBQVM7O0FBQ1QsT0FBQSxJQUFPLE1BQUEsR0FBUyxRQUFBLENBQUEsQ0FBQTtTQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQyxDQUFDLElBQUYsRUFBVCxDQUFBLEdBQW1CLENBQW5CLEdBQXFCLEdBQXRCLENBQUEsR0FBMkIsS0FBNUIsQ0FBQSxHQUFtQyxHQUFwQyxDQUFBLEdBQXlDO0FB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UTs7QUFZVCxDQUFDLENBQUMsS0FBRixHQUFVLFFBQUEsQ0FBQyxLQUFELENBQUE7U0FBVyxDQUFBLENBQUEsQ0FBRyxLQUFLLENBQUMsS0FBRCxDQUFSLENBQUEsQ0FBQSxDQUFBLENBQW1CLEtBQUssQ0FBQyxLQUFELENBQXhCLENBQUE7QUFBWDs7QUFDVixDQUFDLENBQUMsTUFBRixHQUFXLFFBQUEsQ0FBQyxLQUFELENBQUE7U0FBVyxFQUFBLENBQUEsQ0FBSSxLQUFLLENBQUMsS0FBRCxDQUFULENBQUEsR0FBQSxDQUFBLENBQXNCLEtBQUssQ0FBQyxLQUFELENBQTNCLEVBQUE7QUFBWDs7QUFwSW9DIiwic291cmNlc0NvbnRlbnQiOlsiIyBpbXBvcnQgeyBUb3VybmFtZW50IH0gZnJvbSAnLi90b3VybmFtZW50LmpzJyBcclxuaW1wb3J0IHsgVGFibGVzIH0gZnJvbSAnLi9wYWdlX3RhYmxlcy5qcycgXHJcbmltcG9ydCB7IE5hbWVzIH0gZnJvbSAnLi9wYWdlX25hbWVzLmpzJyBcclxuaW1wb3J0IHsgU3RhbmRpbmdzIH0gZnJvbSAnLi9wYWdlX3N0YW5kaW5ncy5qcycgXHJcbmltcG9ydCB7IEFjdGl2ZSB9IGZyb20gJy4vcGFnZV9hY3RpdmUuanMnIFxyXG5cclxuZXhwb3J0IGcgPSB7fVxyXG5cclxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuZy5FWFBPTkVOVCA9IDEuMDEgIyAxIG9yIDEuMDEgKG9yIDIpXHJcbmcuQ09MT1JTID0gMSAjIDIgZWogdGlsbMOldGV0LCBkw6Uga2FuIHd3dyBlbGxlciBiYmIgdXBwc3TDpS5cclxuZy5CT05VUyA9IDEgIyAlIGbDtnJkZWwgZsO2ciBzdmFydCB2aWQgcmVtaS4gRHViYmVsdCB2aWQgdmluc3QuIE1vdHN2YXJhbmRlIG5lZ2F0aXZ0IGbDtnIgdml0LlxyXG5cclxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuZXhwb3J0IHByaW50ID0gY29uc29sZS5sb2dcclxuZXhwb3J0IHJhbmdlID0gXy5yYW5nZVxyXG5leHBvcnQgc2NhbGV4ID0gKHgpIC0+IHggKiBnLlpPT01bZy5zdGF0ZV0gLyAyMFxyXG5leHBvcnQgc2NhbGV5ID0gKHkpIC0+IHkgKiBnLlpPT01bZy5zdGF0ZV1cclxuXHJcbmcuc2VlZCA9IDBcclxuZXhwb3J0IHJhbmRvbSA9IC0+ICgoKE1hdGguc2luKGcuc2VlZCsrKS8yKzAuNSkqMTAwMDApJTEwMCkvMTAwXHJcblxyXG5leHBvcnQgd3JhcCA9IChzKSAtPiBcIigje3N9KVwiXHJcblxyXG5nLkJZRSA9IC0xXHJcbmcuUEFVU0UgPSAtMlxyXG5cclxuZXhwb3J0IFNFUEFSQVRPUiA9ICchJ1xyXG5cclxuZy5UQUJMRVMgICAgPSAwXHJcbmcuTkFNRVMgICAgID0gMVxyXG5nLlNUQU5ESU5HUyA9IDJcclxuZy5BQ1RJVkUgICAgPSAzXHJcblxyXG5nLnBhZ2VzID0gW11cclxuXHJcbmcubWVzc2FnZSA9IFwiXCJcclxuXHJcbmcuRiA9IChkaWZmKSAtPiAxIC8gKDEgKyBwb3cgMTAsIC1kaWZmLzQwMClcclxuXHJcbmcuc2hvd1R5cGUgPSAoYSkgLT4gaWYgdHlwZW9mIGEgPT0gJ3N0cmluZycgdGhlbiBcIicje2F9J1wiIGVsc2UgYVxyXG5leHBvcnQgYXNzZXJ0ID0gKGEsYikgLT4gaWYgbm90IF8uaXNFcXVhbCBhLGIgdGhlbiBwcmludCBcIkFzc2VydCBmYWlsdXJlOiAje0pTT04uc3RyaW5naWZ5IGF9ICE9ICN7SlNPTi5zdHJpbmdpZnkgYn1cIlxyXG5cclxuZy5vayA9IChhLGIpIC0+IGEuaWQgIT0gYi5pZCBhbmQgYS5pZCBub3QgaW4gYi5vcHAgYW5kIGFicyhhLmJhbGFucygpICsgYi5iYWxhbnMoKSkgPD0gZy5DT0xPUlNcclxuXHJcbiMgZy5vayA9IChhLGIpIC0+IFxyXG4jIFx0bWFuZCA9IGEubWFuZGF0b3J5KCkgKyBiLm1hbmRhdG9yeSgpXHJcbiMgXHRhLmlkICE9IGIuaWQgYW5kIGEuaWQgbm90IGluIGIub3BwIGFuZCBtYW5kICE9IFwiYmJcIiBhbmQgbWFuZCAhPSBcInd3XCJcclxuXHJcbmcub3RoZXIgPSAoY29sKSAtPiBpZiBjb2wgPT0gJ2InIHRoZW4gJ3cnIGVsc2UgJ2InXHJcblxyXG5nLm15Um91bmQgPSAoeCxkZWNzKSAtPiB4LnRvRml4ZWQgZGVjc1xyXG5hc3NlcnQgXCIyLjBcIiwgZy5teVJvdW5kIDEuOTksMVxyXG5hc3NlcnQgXCIwLjZcIiwgZy5teVJvdW5kIDAuNjEsMVxyXG5cclxuZy5pbnRzMnN0cmluZ3MgPSAoaW50cykgLT4gXCIje2ludHN9XCJcclxuYXNzZXJ0IFwiMSwyLDNcIiwgZy5pbnRzMnN0cmluZ3MgWzEsMiwzXVxyXG5hc3NlcnQgXCIxXCIsIGcuaW50czJzdHJpbmdzIFsxXVxyXG5hc3NlcnQgXCJcIiwgZy5pbnRzMnN0cmluZ3MgW11cclxuXHJcbmcucmVzMnN0cmluZyA9IChpbnRzKSAtPiAoaS50b1N0cmluZygpIGZvciBpIGluIGludHMpLmpvaW4gJydcclxuYXNzZXJ0IFwiMTIzXCIsIGcucmVzMnN0cmluZyBbMSwyLDNdXHJcbmFzc2VydCBcIjFcIiwgZy5yZXMyc3RyaW5nIFsxXVxyXG5hc3NlcnQgXCJcIiwgZy5yZXMyc3RyaW5nIFtdXHJcblxyXG5nLnpvb21JbiAgPSAobikgLT4gZy5aT09NW2cuc3RhdGVdKytcclxuZy56b29tT3V0ID0gKG4pIC0+IGcuWk9PTVtnLnN0YXRlXS0tXHJcbmcuc2V0U3RhdGUgPSAobmV3U3RhdGUpIC0+IGlmIGcudG91cm5hbWVudC5yb3VuZCA+IDAgdGhlbiBnLnN0YXRlID0gbmV3U3RhdGVcclxuXHJcbmcuaW52ZXJ0ID0gKGFycikgLT5cclxuXHRyZXMgPSBbXVxyXG5cdGZvciBpIGluIHJhbmdlIGFyci5sZW5ndGhcclxuXHRcdHJlc1thcnJbaV1dID0gaVxyXG5cdHJlc1xyXG5hc3NlcnQgWzAsMSwyLDNdLCBnLmludmVydCBbMCwxLDIsM11cclxuYXNzZXJ0IFszLDIsMCwxXSwgZy5pbnZlcnQgWzIsMywxLDBdXHJcbmFzc2VydCBbMiwzLDEsMF0sIGcuaW52ZXJ0IGcuaW52ZXJ0IFsyLDMsMSwwXVxyXG5cclxueHh4ID0gW1syLDFdLFsxMiwyXSxbMTIsMV0sWzMsNF1dXHJcbnh4eC5zb3J0IChhLGIpIC0+IFxyXG5cdGRpZmYgPSBhWzBdIC0gYlswXSBcclxuXHRpZiBkaWZmID09IDAgdGhlbiBhWzFdIC0gYlsxXSBlbHNlIGRpZmZcclxuYXNzZXJ0IFtbMiwxXSwgWzMsNF0sIFsxMiwxXSwgWzEyLDJdXSwgeHh4XHRcclxuYXNzZXJ0IHRydWUsIFsyXSA+IFsxMl1cclxuYXNzZXJ0IHRydWUsIFwiMlwiID4gXCIxMlwiXHJcbmFzc2VydCBmYWxzZSwgMiA+IDEyXHJcblxyXG4jIHh4eCA9IFtbMiwxXSxbMTIsMl0sWzEyLDFdLFszLDRdXVxyXG4jIGFzc2VydCBbWzIsMV0sWzEyLDFdLFsxMiwyXSxbMyw0XV0sIF8uc29ydEJ5KHh4eCwgKHgpIC0+IFt4WzBdLHhbMV1dKVxyXG4jIGFzc2VydCBbWzMsNF0sWzIsMV0sWzEyLDFdLFsxMiwyXV0sIF8uc29ydEJ5KHh4eCwgKHgpIC0+IC14WzBdKVxyXG4jIGFzc2VydCBbWzIsMV0sWzEyLDFdLFszLDRdLFsxMiwyXV0sIF8uc29ydEJ5KHh4eCwgKHgpIC0+IHhbMV0pXHJcbiMgYXNzZXJ0IFtbMyw0XSxbMTIsMV0sWzIsMV0sWzEyLDJdXSwgXy5zb3J0QnkoeHh4LCAoeCkgLT4gLXhbMV0pXHJcblxyXG5nLmNhbGNNaXNzaW5nID0gLT5cclxuXHRtaXNzaW5nID0gMFxyXG5cdGZvciBwIGluIGcudG91cm5hbWVudC5wbGF5ZXJzQnlJRFxyXG5cdFx0aWYgbm90IHAuYWN0aXZlIHRoZW4gY29udGludWVcclxuXHRcdGlmIGcuQllFID09IF8ubGFzdCBwLm9wcCB0aGVuIGNvbnRpbnVlXHJcblx0XHRpZiBwLnJlcy5sZW5ndGggPCBwLmNvbC5sZW5ndGggdGhlbiBtaXNzaW5nKytcclxuXHQjIGcubWVzc2FnZSA9IFwiI3ttaXNzaW5nLy8yfSByZXN1bHRzIG1pc3NpbmdcIlxyXG5cdG1pc3NpbmcvLzJcclxuXHJcbmcuc3VtID0gKHMpIC0+XHJcblx0cmVzID0gMFxyXG5cdGZvciBpdGVtIGluIHNcclxuXHRcdHJlcyArPSBwYXJzZUZsb2F0IGl0ZW1cclxuXHRyZXNcclxuYXNzZXJ0IDYsIGcuc3VtICcwMTIwMTInXHJcblxyXG5nLnN1bU51bWJlcnMgPSAoYXJyKSAtPlxyXG5cdCMgcHJpbnQgJ3N1bU51bWJlcnMnLGFyclxyXG5cdHJlcyA9IDBcclxuXHRmb3IgaXRlbSBpbiBhcnJcclxuXHRcdHJlcyArPSBpdGVtXHJcblx0cmVzXHJcbmFzc2VydCAxNSwgZy5zdW1OdW1iZXJzIFsxLDIsMyw0LDVdXHJcblxyXG5nLnR4dFQgPSAodmFsdWUsIHcsIGFsaWduPSBDRU5URVIpIC0+IFxyXG5cdGlmIHZhbHVlLmxlbmd0aCA+IHcgdGhlbiB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZyAwLHdcclxuXHRpZiB2YWx1ZS5sZW5ndGggPCB3IGFuZCBhbGlnbj09IFJJR0hUIHRoZW4gdmFsdWUgPSB2YWx1ZS5wYWRTdGFydCB3XHJcblx0aWYgYWxpZ249PSBMRUZUIHRoZW4gcmVzID0gdmFsdWUgKyBfLnJlcGVhdCAnICcsdy12YWx1ZS5sZW5ndGhcclxuXHRpZiBhbGlnbj09IFJJR0hUIHRoZW4gcmVzID0gXy5yZXBlYXQoJyAnLHctdmFsdWUubGVuZ3RoKSArIHZhbHVlXHJcblx0aWYgYWxpZ249PSBDRU5URVIgXHJcblx0XHRkaWZmID0gdy12YWx1ZS5sZW5ndGhcclxuXHRcdGx0ID0gXy5yZXBlYXQgJyAnLCgxK2RpZmYpLy8yXHJcblx0XHRydCA9IF8ucmVwZWF0ICcgJyxkaWZmLy8yXHJcblx0XHRyZXMgPSBsdCArIHZhbHVlICsgcnRcclxuXHRyZXNcclxuXHJcbmcucHJCdGggPSAoc2NvcmUpIC0+IFwiI3snMMK9MSdbc2NvcmVdfS0jeycxwr0wJ1tzY29yZV19XCJcclxuZy5wckJvdGggPSAoc2NvcmUpIC0+IFwiICN7JzDCvTEnW3Njb3JlXX0gLSAjeycxwr0wJ1tzY29yZV19IFwiXHJcblxyXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcbiJdfQ==
//# sourceURL=c:\github\FairPair\coffee\globals.coffee