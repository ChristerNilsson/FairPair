// Generated by CoffeeScript 2.7.0
var indexOf = [].indexOf;

import {
  g,
  print,
  range,
  scalex,
  scaley,
  SEPARATOR
} from './globals.js';

export var Player = class Player {
  constructor(id1, name = "", elo = "1400", opp1 = [], col1 = "", res1 = "", active = true) {
    this.id = id1;
    this.name = name;
    this.elo = elo;
    this.opp = opp1;
    this.col = col1;
    this.res = res1;
    this.active = active;
    
    // @cache = {}
    this.pos = []; // one for each round
  }

  toggle() {
    var p;
    this.active = !this.active;
    return g.tournament.paused = (function() {
      var j, len, ref, results;
      ref = g.tournament.playersByID;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        if (!p.active) {
          results.push(p.id);
        }
      }
      return results;
    })();
  }

  bye() {
    var ref;
    return ref = g.BYE, indexOf.call(this.opp, ref) >= 0;
  }

  // calcRound0 : (r) ->
  // 	if @opp[r] == g.BYE then return g.K * (1.0 - g.F 0)
  // 	if @opp[r] == g.PAUSE then return 0
  // 	if r >= @res.length then return 0
  // 	a = @elo
  // 	b = g.tournament.playersByID[@opp[r]].elo
  // 	diff = a - b
  // 	g.K * (@res[r]/2 - g.F diff)
  calcRound1(r) {
    var b, color;
    if (this.opp[r] === g.BYE) {
      return this.elo;
    }
    if (this.opp[r] === g.PAUSE) {
      return 0;
    }
    if (r >= this.res.length) {
      return 0;
    }
    b = g.tournament.playersByID[this.opp[r]].elo;
    color = this.col[r];
    // if color == 'b' then faktor = 1 + 2 * g.BONUS/100 # t ex 1.02
    // if color == 'w' then faktor = 1 - 2 * g.BONUS/100 # t ex 0.98
    if (this.res[r] === '2') {
      return b; // WIN
    }
    if (this.res[r] === '1') {
      return b / 2; // DRAW 
    }
    return 0; // LOSS
  }

  explanation(r) {
    var col, opp, res;
    if (this.opp[r] === g.BYE) {
      return "";
    }
    if (this.opp[r] === g.PAUSE) {
      return "";
    }
    res = ['Loss', 'Draw', 'Win'][this.res[r]];
    opp = g.tournament.playersByID[this.opp[r]];
    col = this.col[r] === 'w' ? 'white' : 'black';
    return `${res} against ${opp.elo} ${opp.name} as ${col}`;
  }

  // if r >= @res.length then return ""
  // if @res[r] == '0' then return "0"
  // b = g.tournament.playersByID[@opp[r]].elo
  // color = @col[r]
  // # if color == 'b' then faktor = 1 + 2 * g.BONUS/100 # t ex 1.02
  // # if color == 'w' then faktor = 1 - 2 * g.BONUS/100 # t ex 0.98
  // if @res[r] == '2' then faktor = 1.0 # WIN
  // if @res[r] == '1' then faktor = 0.5 # DRAW
  // result = faktor * b 
  // "#{result.toFixed(2)} = #{faktor} * #{g.tournament.playersByID[@opp[r]].elo}" 

    // linear_performance : (r) ->
  // 	if @opp[r] == g.BYE   then return @elo + 400
  // 	if @opp[r] == g.PAUSE then return 0
  // 	if r >= @res.length then return 0
  // 	b = g.tournament.playersByID[@opp[r]].elo
  // 	if @res[r] == '2' then return b + 400  # WIN
  // 	if @res[r] == '1' then return b        # DRAW
  // 	if @res[r] == '0' then return b - 400  # LOSS
  expected_score(ratings, own_rating) {
    var rating;
    return g.sum((function() {
      var j, len, results;
      results = [];
      for (j = 0, len = ratings.length; j < len; j++) {
        rating = ratings[j];
        results.push(1 / (1 + 10 ** ((rating - own_rating) / 400)));
      }
      return results;
    })());
  }

  performance_rating(ratings, score) {
    var hi, lo, rating;
    lo = 0;
    hi = 4000;
    while (hi - lo > 0.001) {
      rating = (lo + hi) / 2;
      if (score > this.expected_score(ratings, rating)) {
        lo = rating;
      } else {
        hi = rating;
      }
    }
    return rating;
  }

  performance() {
    var j, len, r, ratings, ref, score;
    score = 0;
    ratings = [];
    ref = range(this.res.length);
    for (j = 0, len = ref.length; j < len; j++) {
      r = ref[j];
      if (this.opp[r] === g.BYE) {
        continue;
      }
      if (this.opp[r] === g.PAUSE) {
        continue;
      }
      score += this.res[r] / 2;
      ratings.push(g.tournament.playersByID[this.opp[r]].elo);
    }
    return this.performance_rating(ratings, score);
  }

  calcRound(r) {
    // if g.FACTOR == 0 then @calcRound0 r else @calcRound1 r
    return 1 * this.calcRound1(r);
  }

  change(rounds) {
    // if rounds of @cache then return @cache[rounds]
    // @cache[rounds] = g.sum (@calcRound r for r in range rounds)
    // g.sum (@calcRound r for r in range rounds)

    // perChg : (rounds) -> # https://en.wikipedia.org/wiki/Performance_rating_(chess)
    //g.sum(@performance r for r in range rounds)/(rounds-1)
    return this.performance(); // r for r in range rounds)/(rounds-1)
  }

  score(rounds) {
    var r;
    return g.sum((function() {
      var j, len, ref, results;
      ref = range(rounds - 1);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        r = ref[j];
        results.push(parseInt(this.res[r]));
      }
      return results;
    }).call(this));
  }

  // result = 0
  // for r in range rounds-1
  // #for ch in @res
  // 	result += parseInt @res[r]
  // result
  avgEloDiffAbs() {
    var id, j, len, ref, res;
    res = [];
    ref = this.opp.slice(0, this.opp.length);
    // - 1
    for (j = 0, len = ref.length; j < len; j++) {
      id = ref[j];
      if (id >= 0) {
        res.push(abs(this.elo - g.tournament.playersByID[id].elo));
      }
    }
    if (res.length === 0) {
      return 0;
    } else {
      return g.sum(res) / res.length;
    }
  }

  avgEloDiffRel() {
    var id, j, len, ref, res;
    res = [];
    ref = this.opp.slice(0, this.opp.length);
    // - 1
    for (j = 0, len = ref.length; j < len; j++) {
      id = ref[j];
      if (id >= 0) {
        res.push(g.tournament.playersByID[id].elo);
      }
    }
    if (res.length === 0) {
      return 0;
    } else {
      return this.elo - g.sum(res) / res.length;
    }
  }

  // avgEloDiffRel : ->
  // 	res = []
  // 	for id in @opp.slice 0, @opp.length # - 1
  // 		if id >= 0 then res.push @elo - g.tournament.playersByID[id].elo
  // 	if res.length == 0 then 0 else g.sum(res) / res.length
  balans() { // f√§rgbalans
    var ch, j, len, ref, result;
    result = 0;
    ref = this.col;
    for (j = 0, len = ref.length; j < len; j++) {
      ch = ref[j];
      if (ch === 'b') {
        result -= 1;
      }
      if (ch === 'w') {
        result += 1;
      }
    }
    return result;
  }

  // mandatory : -> # w if white, b if black else space
  // 	print 'balans',@balans()
  // 	if @balans >= 1 then return 'b'
  // 	if @balans <= -1 then return 'w'
  // 	n = @col.length
  // 	if n < 2 then return ' '
  // 	if "ww" == @col.slice n-2 then return 'b'
  // 	if "bb" == @col.slice n-2 then return 'w'
  // 	' '
  read(player) {
    var arr, col, j, len, ocr, ocrs, results;
    
    // print player
    this.elo = parseInt(player[0]);
    this.name = player[1];
    this.opp = [];
    this.col = "";
    this.res = "";
    if (player.length < 3) {
      return;
    }
    ocrs = player.slice(2);
// print 'ocrs',ocrs
    results = [];
    for (j = 0, len = ocrs.length; j < len; j++) {
      ocr = ocrs[j];
      if (indexOf.call(ocr, 'w') >= 0) {
        col = 'w';
      }
      if (indexOf.call(ocr, 'b') >= 0) {
        col = 'b';
      }
      if (indexOf.call(ocr, '_') >= 0) {
        col = '_';
      }
      arr = ocr.split(col);
      this.opp.push(parseInt(arr[0]));
      this.col += col;
      if (arr.length === 2 && arr[1].length === 1) {
        results.push(this.res += arr[1]);
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  write() { // 1234!Christer!12w0!23b1!14w2   Elo:1234 Name:Christer opponent:23 color:b result:1
    var i, ocr, r, res;
    res = [];
    res.push(this.elo);
    res.push(this.name);
    r = this.opp.length;
    if (r === 0) {
      return res.join(SEPARATOR);
    }
    ocr = (function() {
      var j, len, ref, results;
      ref = range(r);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(`${this.opp[i]}${this.col[i]}${i < r ? this.res[i] : ''}`);
      }
      return results;
    }).call(this);
    res.push(ocr.join(SEPARATOR));
    return res.join(SEPARATOR);
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\FairPair\coffee\player.coffee