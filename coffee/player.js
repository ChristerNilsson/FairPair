// Generated by CoffeeScript 2.7.0
var indexOf = [].indexOf;

import {
  g,
  print,
  range,
  scalex,
  scaley,
  SEPARATOR
} from './globals.js';

export var Player = class Player {
  constructor(id1, name = "", elo = "1400", opp1 = [], col1 = "", res1 = "", active = true) {
    this.id = id1;
    this.name = name;
    this.elo = elo;
    this.opp = opp1;
    this.col = col1;
    this.res = res1;
    this.active = active;
    this.pos = [];
  }

  toggle() {
    var p;
    this.active = !this.active;
    return g.tournament.paused = (function() {
      var j, len, ref, results;
      ref = g.tournament.playersByID;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        if (!p.active) {
          results.push(p.id);
        }
      }
      return results;
    })();
  }

  bye() {
    var ref;
    return ref = g.BYE, indexOf.call(this.opp, ref) >= 0;
  }

  explanation(r) {
    var col, opp, res;
    if (this.opp[r] === g.BYE) {
      return "";
    }
    if (this.opp[r] === g.PAUSE) {
      return "";
    }
    res = ['Loss', 'Draw', 'Win'][this.res[r]];
    opp = g.tournament.playersByID[this.opp[r]];
    col = this.col[r] === 'w' ? 'white' : 'black';
    return `${res} against ${opp.elo} ${opp.name} as ${col}`;
  }

  expected_score(ratings, own_rating) {
    var rating;
    return g.sum((function() {
      var j, len, results;
      results = [];
      for (j = 0, len = ratings.length; j < len; j++) {
        rating = ratings[j];
        results.push(1 / (1 + 10 ** ((rating - own_rating) / 400)));
      }
      return results;
    })());
  }

  performance_rating(ratings, score) {
    var a, b, hi, lo, rating;
    if (ratings.length === 1 && score === 0) {
      a = this.performance_rating(ratings, 0.50);
      b = this.performance_rating(ratings, 0.25);
      return 2 * b - a;
    }
    if (ratings.length === 1 && score === 1) {
      a = this.performance_rating(ratings, 0.50);
      b = this.performance_rating(ratings, 0.75);
      return 2 * b - a;
    }
    if (score === 0) {
      a = this.performance_rating(ratings, 1.0);
      b = this.performance_rating(ratings, 0.5);
      return 2 * b - a;
    }
    if (score === ratings.length) {
      a = this.performance_rating(ratings, score - 1.0);
      b = this.performance_rating(ratings, score - 0.5);
      return 2 * b - a;
    }
    lo = 0;
    hi = 4000;
    while (hi - lo > 0.001) {
      rating = (lo + hi) / 2;
      if (score > this.expected_score(ratings, rating)) {
        lo = rating;
      } else {
        hi = rating;
      }
    }
    return rating;
  }

  performance() {
    var j, len, r, ratings, ref, score;
    score = 0;
    ratings = [];
    ref = range(this.res.length);
    for (j = 0, len = ref.length; j < len; j++) {
      r = ref[j];
      if (this.opp[r] === g.BYE) {
        continue;
      }
      if (this.opp[r] === g.PAUSE) {
        continue;
      }
      score += this.res[r] / 2;
      ratings.push(g.tournament.playersByID[this.opp[r]].elo);
    }
    return this.performance_rating(ratings, score);
  }

  // enhanced_performance : ->
  // 	score = 0 
  // 	ratings = []
  // 	for r in range @res.length
  // 		if @opp[r] == g.BYE then continue
  // 		if @opp[r] == g.PAUSE then continue
  // 		score += @res[r]/2
  // 		ratings.push g.tournament.playersByID[@opp[r]].elo
  // 	score += 0.5 # fiktiv remi
  // 	ratings.push g.average # global average opponent elo
  // 	@performance_rating ratings,score
  change(rounds) {
    return this.performance();
  }

  score(rounds) {
    var r;
    return g.sum((function() {
      var j, len, ref, results;
      ref = range(rounds - 1);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        r = ref[j];
        results.push(parseInt(this.res[r]));
      }
      return results;
    }).call(this));
  }

  eloDiffAbs() {
    var id, j, len, ref, res;
    res = [];
    ref = this.opp.slice(0, this.opp.length);
    // - 1
    for (j = 0, len = ref.length; j < len; j++) {
      id = ref[j];
      if (id >= 0) {
        res.push(abs(this.elo - g.tournament.playersByID[id].elo));
      }
    }
    return g.sum(res);
  }

  balans() { // f√§rgbalans
    var ch, j, len, ref, result;
    result = 0;
    ref = this.col;
    for (j = 0, len = ref.length; j < len; j++) {
      ch = ref[j];
      if (ch === 'b') {
        result -= 1;
      }
      if (ch === 'w') {
        result += 1;
      }
    }
    return result;
  }

  read(player) {
    var arr, col, j, len, ocr, ocrs, results;
    this.elo = parseInt(player[0]);
    this.name = player[1];
    this.opp = [];
    this.col = "";
    this.res = "";
    if (player.length < 3) {
      return;
    }
    ocrs = player.slice(2);
    results = [];
    for (j = 0, len = ocrs.length; j < len; j++) {
      ocr = ocrs[j];
      if (indexOf.call(ocr, 'w') >= 0) {
        col = 'w';
      }
      if (indexOf.call(ocr, 'b') >= 0) {
        col = 'b';
      }
      if (indexOf.call(ocr, '_') >= 0) {
        col = '_';
      }
      arr = ocr.split(col);
      this.opp.push(parseInt(arr[0]));
      this.col += col;
      if (arr.length === 2 && arr[1].length === 1) {
        results.push(this.res += arr[1]);
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  write() { // 1234!Christer!12w0!23b1!14w2   Elo:1234 Name:Christer opponent:23 color:b result:1
    var i, ocr, r, res;
    res = [];
    res.push(this.elo);
    res.push(this.name);
    r = this.opp.length;
    if (r === 0) {
      return res.join(SEPARATOR);
    }
    ocr = (function() {
      var j, len, ref, results;
      ref = range(r);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(`${this.opp[i]}${this.col[i]}${i < r ? this.res[i] : ''}`);
      }
      return results;
    }).call(this);
    res.push(ocr.join(SEPARATOR));
    return res.join(SEPARATOR);
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\FairPair\coffee\player.coffee