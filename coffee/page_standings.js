// Generated by CoffeeScript 2.7.0
var indexOf = [].indexOf,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  g,
  print,
  range,
  scalex,
  scaley
} from './globals.js';

import {
  Page
} from './page.js';

import {
  Button,
  spread
} from './button.js';

import {
  Lista
} from './lista.js';

export var Standings = class Standings extends Page {
  constructor() {
    super();
    this.mouseMoved = this.mouseMoved.bind(this);
    this.t = g.tournament;
    this.buttons.ArrowLeft = new Button('', '', () => {
      return g.setState(g.ACTIVE);
    });
    this.buttons.ArrowRight = new Button('', '', () => {
      return g.setState(g.TABLES);
    });
    this.buttons.s.active = false;
  }

  setLista() {
    var array, dubletter, header, p, rheader;
    rheader = _.map(range(1, this.t.round + 1), function(i) {
      return ` ${i % 10} `;
    });
    rheader = rheader.join('');
    header = "";
    header += g.txtT("Pos", 3, RIGHT);
    header += ' ' + g.txtT("Id", 3, RIGHT);
    header += ' ' + g.txtT("Elo", 4, RIGHT);
    header += ' ' + g.txtT("Name", 25, LEFT);
    header += '' + g.txtT(rheader, 3 * this.round, LEFT);
    header += ' ' + g.txtT("PR", 7, RIGHT);
    header += ' ' + g.txtT("EPR", 8, RIGHT);
    this.playersByPerformance = _.clone(this.t.playersByID.slice(0, g.N));
    // @playersByPerformance = @playersByPerformance.sort (a,b) => 
    // 	if b.change(@t.round+1) == a.change(@t.round+1) then b.elo - a.elo
    // 	else b.change(@t.round+1) - a.change(@t.round+1)
    this.playersByPerformance = this.playersByPerformance.sort((a, b) => {
      var ap, bp;
      ap = a.performance();
      bp = b.performance();
      if (ap === bp) {
        return b.enhanced_performance() - a.enhanced_performance();
      } else {
        return bp - ap;
      }
    });
    array = (function() {
      var j, len, ref, results;
      ref = this.playersByPerformance;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        results.push(p.performance().toFixed(1));
      }
      return results;
    }).call(this);
    dubletter = _.uniq(_.filter(array, (value, index, array) => {
      return _.indexOf(array, value) !== _.lastIndexOf(array, value);
    }));
    console.log(dubletter);
    this.lista = new Lista(this.playersByPerformance, header, this.buttons, (p, index, pos) => { // returnera strängen som ska skrivas ut. Dessutom ritas lightbulbs här.
      var j, len, perf, r, ref, s, value, x;
      this.y_bulb = (5 + index) * g.ZOOM[g.state];
      textAlign(LEFT);
      fill('black');
      s = "";
      s += g.txtT((1 + pos).toString(), 3, RIGHT);
      s += ' ' + g.txtT((1 + p.id).toString(), 3, RIGHT);
      s += ' ' + g.txtT(p.elo.toString(), 4, RIGHT);
      s += ' ' + g.txtT(p.name, 25, LEFT);
      s += ' ' + g.txtT('', 3 * (this.t.round - 1), CENTER);
      value = p.performance(); // change(@t.round)
      perf = p.performance().toFixed(1);
      if (value < 1) {
        s += ' ' + g.txtT("-inf  ", 8, RIGHT);
      } else if (value > 3999) {
        s += ' ' + g.txtT("inf  ", 8, RIGHT);
      } else {
        s += ' ' + g.txtT(perf, 8, RIGHT);
      }
      if (indexOf.call(dubletter, perf) >= 0) {
        s += ' ' + g.txtT(p.enhanced_performance().toFixed(1), 8, RIGHT);
      } else {
        s += ' ' + g.txtT('', 8, RIGHT);
      }
      ref = range(g.tournament.round - 1);
      //- 1
      for (j = 0, len = ref.length; j < len; j++) {
        r = ref[j];
        x = g.ZOOM[g.state] * (24.2 + 1.8 * r);
        this.lightbulb(p.id, p.col[r], x, this.y_bulb, p.res.slice(r, r + 1), p.opp[r]);
      }
      return s;
    });
    this.lista.paintYellowRow = false;
    return spread(this.buttons, 10, this.y, this.h);
  }

  mouseMoved() {
    var b, chg, iy, pa, pb, r, s;
    boundMethodCheck(this, Standings);
    r = round((mouseX / g.ZOOM[g.state] - 24.2) / 1.8);
    iy = this.lista.offset + round(mouseY / g.ZOOM[g.state] - 5);
    if ((0 <= iy && iy < this.playersByPerformance.length) && (0 <= r && r < g.tournament.round - 1)) {
      pa = this.playersByPerformance[iy];
      b = pa.opp[r];
      if (b === g.BYE) {
        s = "";
        s += g.txtT('', 3, RIGHT);
        s += ' ' + g.txtT('', 3, RIGHT);
        s += ' ' + g.txtT('', 4, RIGHT);
        s += ' ' + g.txtT('has a bye', 25, LEFT);
        s += ' ' + g.txtT('', 3 * (this.t.round - 1), LEFT);
        // g.help = "#{pa.elo} #{pa.name} has a bye                   #{pa.elo.toFixed(1)}" # => chg = #{g.K/2}"
        s += ' ' + g.txtT(`${pa.elo.toFixed(1)}`, 7, RIGHT);
        g.help = s;
      }
      if (b === g.PAUSE) {
        s = "";
        s += g.txtT('', 3, RIGHT);
        s += ' ' + g.txtT('', 3, RIGHT);
        s += ' ' + g.txtT('', 4, RIGHT);
        s += ' ' + g.txtT('has a pause', 25, LEFT);
        s += ' ' + g.txtT('', 3 * (this.t.round - 1), LEFT);
        // g.help = "#{pa.elo} #{pa.name} has a bye                   #{pa.elo.toFixed(1)}" # => chg = #{g.K/2}"
        s += ' ' + g.txtT("0.0", 7, RIGHT);
        g.help = s;
      }
      // 	s += "#{pa.elo} #{pa.name} has a pause                    0.0" # => chg = 0"

      // g.help = s
      if (b >= 0) {
        pb = this.t.playersByID[b];
        chg = 1234; //pa.calcRound r
        s = "";
        s += g.txtT('', 3, RIGHT);
        s += ' ' + g.txtT((1 + pb.id).toString(), 3, RIGHT);
        s += ' ' + g.txtT(pb.elo.toString(), 4, RIGHT);
        s += ' ' + g.txtT(pb.name, 25, LEFT);
        s += ' ' + g.txtT('', 3 * (this.t.round - 1), LEFT);
        s += ' ' + g.txtT(chg.toFixed(1), 7, RIGHT);
        if (pa.res[r] === '1') {
          s += ` = 0.5 * (${g.txtT(pb.elo, 7, RIGHT)})`;
        }
        if (pa.res[r] === '2') {
          s += ` = ${g.txtT(pb.elo, 7, RIGHT)}`;
        }
        return g.help = pa.explanation(r);
      }
    } else {
      return g.help = "";
    }
  }

  mouseWheel(event) {
    return this.lista.mouseWheel(event);
  }

  mousePressed(event) {
    return this.lista.mousePressed(event);
  }

  keyPressed(event) {
    return this.buttons[key].click();
  }

  draw() {
    var button, key, ref;
    fill('white');
    this.showHeader(this.t.round - 1);
    this.lista.draw();
    ref = this.buttons;
    for (key in ref) {
      button = ref[key];
      button.draw();
    }
    textAlign(LEFT);
    return text(g.help, 10, 3 * g.ZOOM[g.state]);
  }

  show(s, x, y, bg, fg) {
    fill(bg);
    rect(x, y, 1.6 * g.ZOOM[g.state], 0.9 * g.ZOOM[g.state]);
    fill(fg);
    return this.txt(s, x, y + 1, CENTER);
  }

  lightbulb(id, color, x, y, result, opponent) {
    var s;
    push();
    rectMode(CENTER);
    s = 1 + opponent;
    if (opponent === g.PAUSE) {
      this.show(" P ", x, y, "gray", 'yellow');
    }
    if (opponent === g.BYE) {
      this.show("BYE", x, y, "green", 'yellow');
    }
    if (opponent >= 0) {
      result = '012'.indexOf(result);
      this.show(1 + opponent, x, y, 'red gray green'.split(' ')[result], {
        b: 'black',
        ' ': 'yellow',
        w: 'white'
      }[color]);
    }
    return pop();
  }

  make(res, header) {
    var i, j, k, l, len, len1, len2, p, player, r, ref, ref1, ref2, s, value;
    if (this.t.pairs.length === 0) {
      res.push("This ROUND can't be paired! (Too many rounds)");
    }
    res.push("STANDINGS" + header);
    res.push("");
    header = "";
    header += g.txtT("Pos", 3, RIGHT);
    header += ' ' + g.txtT('Id', 3, RIGHT);
    header += ' ' + g.txtT("Elo", 4, RIGHT);
    header += ' ' + g.txtT("Name", 25, LEFT);
    ref = range(this.t.round);
    for (j = 0, len = ref.length; j < len; j++) {
      r = ref[j];
      header += g.txtT(`${r + 1}`, 6, RIGHT);
    }
    header += ' ' + g.txtT("PR", 7, RIGHT);
    header += ' ' + g.txtT("EPR", 8, RIGHT);
    ref1 = this.playersByPerformance;
    for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
      player = ref1[i];
      if (i % this.t.ppp === 0) {
        res.push(header);
      }
      s = "";
      s += g.txtT((1 + i).toString(), 3, RIGHT);
      s += ' ' + g.txtT((1 + player.id).toString(), 3, RIGHT);
      s += ' ' + g.txtT(player.elo.toString(), 4, RIGHT);
      s += ' ' + g.txtT(player.name, 25, LEFT);
      s += ' ';
      ref2 = range(this.t.round);
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        r = ref2[l];
        if (player.opp[r] === -2) {
          s += '    P ';
        }
        if (player.opp[r] === -1) {
          s += '   BYE';
        }
        if (player.opp[r] >= 0) {
          s += g.txtT(`${1 + player.opp[r]}${g.RINGS[player.col[r][0]]}${"0½1"[player.res[r]]}`, 6, RIGHT);
        }
      }
      p = player;
      value = p.change(this.t.round);
      s += ' ' + g.txtT(p.performance().toFixed(1), 8, RIGHT);
      if (value < 1) {
        s += ' ' + g.txtT("-inf  ", 8, RIGHT);
      } else if (value > 3999) {
        s += ' ' + g.txtT("inf  ", 8, RIGHT);
      } else {
        s += ' ' + g.txtT(p.enhanced_performance().toFixed(1), 8, RIGHT);
      }
      // s += ' ' + g.txtT p.balans(),3,RIGHT
      // s += ' ' + g.txtT player.change(@t.round+1).toFixed(1),  7,  RIGHT
      // s += ' ' + g.txtT player.perChg(@t.round+1).toFixed(1),  7,  RIGHT
      res.push(s);
      if (i % this.t.ppp === this.t.ppp - 1) {
        res.push("\f");
      }
    }
    return res.push("\f");
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\FairPair\coffee\page_standings.coffee